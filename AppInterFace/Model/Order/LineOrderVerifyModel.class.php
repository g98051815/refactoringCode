<?php
namespace  AppInterFace\Model\Order;
use AppInterFace\Model\Order\LineOrderBaseModel;
/** 线路订单验证模型

*/
class LineOrderVerifyModel extends LineOrderBaseModel{

    protected $generateOrderNo = false;

    protected $autoCheckFields = false;

    protected $dbConfig;

    protected $trlValidate;

    protected $trlValidateStock;

    protected $unpaidOrdersMax; //未付款订单数量最大值

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->dbConfig = ['STOCK'=>'trl_line_stock','GOODS'=>'trl_line','ORDER'=>'trl_line_order','TYPE'=>'trl_line_type','COUPON_ACCESS'=>'trl_coupon'];
        $this->unpaidOrdersMax = 3; //未付款订单数量最大值
        $this->trlValidateStock[] = 'verifyContacts'; //验证联系人
        $this->trlValidateStock[] = 'verifyGoods'; //验证商品
        $this->trlValidateStock[] = 'verifyType'; //验证类型
        $this->trlValidateStock[] = 'verifyStock'; //验证库存
        $this->trlValidateStock[] = 'verifyUnpaidOrders'; //验证未付款订单数量
        $this->trlValidateStock[] = 'travelerValidate';//出行人验证
        //在优惠券存在的前提下验证优惠券的规则
        if(!empty($this->getValidate('coupon_no'))){
            $this->trlValidateStock[] = 'verifyCoupon'; //验证优惠券
            $this->trlValidateStock[] = 'verifyCouponConditionPrice'; //验证是否满足优惠券的使用金额
        }

    }

    public function validateBegin(){
        foreach($this->trlValidateStock as $val){
            if(!$this->$val()){
                return false;
            }
        }
        return true;
    }

    //验证联系人
    private function verifyContacts(){
        //联系人没有填写
        if(empty($this->getValidate('contacts'))){
            $this->error = '请填写联系人！';
            return false;
        }

        //联系人电话不正确
        if(empty($this->getValidate('contacts_phone'))){
            $this->error = '请填写联系人电话！';
            return false;
        }

        
        //手机号码验证
        if(!preg_match('/^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d{8}$/',$this->getValidate('contacts_phone'))){
        	$this->error = '联系人电话不正确！';
        	return false;
        }

        //电子邮件验证
        if(empty($this->getValidate('contacts_email'))){
            $this->error = '请填写联系人电子邮件！';
            return false;
        }

        //邮箱验证
        if(!preg_match('/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,3}){1,2})$/',$this->getValidate('contacts_email'))){
        	
        	$this->error = '邮箱地址不正确，请检查！';
        	return false;
        }

        return true;
    }

    /**
    *出行人验证
    */
    private function travelerValidate(){
        if($this->getValidate('travel_people') == ''){
            $this->error = '请选择出行人！';
            return false;
        }
    }

    //验证商品库存
    private function verifyStock(){
        if(empty($this->getValidate('out_date_time'))){$this->error = '您选择的出行日期已经售罄！';return false;}
        if(empty($this->getValidate('number'))){$this->error='请选择出行人数量！';return false;}
        $db = $this->dbConfig;
        $where['date_time'] = array('eq',$this->getValidate('out_date_time'));
        $where['type'] = array('eq',$this->getValidate('type_id'));
        $ret = $this->table($db['STOCK'])->where($where)->lock(true)->find();
        if($ret['status'] == '0' || $ret['status']==0){
            $this->error = '此商品已经停止销售！';
            return false;
        }

        if($ret['number'] < $this->getValidate('number')){
            $this->error = '此商品库存不足！';
            return false;
        }
        //验证通过
        return true;
    }


    private function verifyGoods(){

        if(empty($this->getValidate('goods_id'))){$this->error = '系统错误请重试！（“没有填写商品id”）';return false;}
        $db = $this->dbConfig;
        $where['id'] = array('eq',$this->getValidate('goods_id'));
        $ret = $this->table($db['GOODS'])->where($where)->find();
        if($ret['status'] == '0' || $ret['status']==0){
            $this->error = '此商品已经停止销售';
            return false;
        }
        return true;
    }


    private function verifyType(){

        if(empty($this->getValidate('type_id'))){$this->error = '系统错误请重试!（“没有填写类型id”）';return false;}
        $db = $this->dbConfig;
        $where['id'] = array('eq',$this->getValidate('type_id'));
        $ret = $this->table($db['TYPE'])->where($where)->find();
        if($ret['status'] == '0' || $ret['status']==0){
            $this->error = '此商品已经停止销售';
            return false;
        }
        if(!$ret['gid'] == $this->getValidate('goods_id')){
            $this->error = '类型id和商品id不符！';
            return false;
        }

        return true;
    }


    //验证优惠券
    private function verifyCoupon(){
        //如果是空的返回真
        if($this->getValidate('coupon_no') == 'NONE'){
            return true;
        }

        $db = $this->dbConfig;
        $where['coupon_no'] = array('eq',$this->getValidate('coupon_no'));
        $ret = $this->table($db['COUPON_ACCESS'])->where($where)->lock(true)->find();
        if($ret['expiration_time'] < time() || $ret['status'] == '0'){
            $this->error = '优惠券已经过期不能使用！';
            return false;
        }

        if(!($ret['uid'] == $this->getValidate('uid'))){
            $this->error = '无法使用优惠券，优惠券不合法！';
            return false;
        }

        if($ret['status'] == '2'){
            $this->error = '此优惠券已经使用过了！';
            return false;
        }

        if(!$ret['goods_id'] == $this->getValidate('goods_id')){
            $this->error = '您使用的优惠券无法用于此商品！';
            return false;
        }

        return true;
    }


    private function verifyCouponConditionPrice(){

        $db = $this->dbConfig;
        $where['coupon_no'] = array('eq',$this->getValidate('coupon_no'));
        $join = 'inner join __COUPON__ ON __COUPON_ACCESS__.coupon_id = __COUPON__.id';
        $ret = $this->table($db['COUPON_ACCESS'])->where($where)->join($join)->find();
        //判断是否满足条件金额
        if(!$this->getValidate('amount_payable') >= $ret['condition_amount']){
            $this->error = '不满足优惠券的使用金额！';
            return false;
        }
        return false;
    }



    //验证未付款订单数量
    private function verifyUnpaidOrders(){
        $db = $this->dbConfig;
        $where['uid'] = array('eq',$this->getValidate('uid'));
        $where['status'] = array('eq','2');
        $ret = $this->table($db['ORDER'])->where($where)->count();
        if($ret >= $this->unpaidOrdersMax){
            $this->error = '您未付款订单已经超过了3请结清订单后再进行下单操作！';
            return false;
        }
        return true;
    }

    //设置数据验证
    public function setValidate($data){

        $this->trlValidate = $data;

    }

    //获取验证的数据
    public function getValidate($key = null){
        if(empty($key)){
            return $this->trlValidate;
        }
        return $this->trlValidate[$key];
    }

}